theory Big_step
  imports "Main" Syntax
begin

section \<open>Semantic definition of the GCL language.\<close>


inductive gbig_step :: "com \<times> state \<Rightarrow> state \<Rightarrow> bool" (infix "\<Rightarrow>\<^sub>g" 55) 
where
  Skip: "(SKIP, s) \<Rightarrow>\<^sub>g s"
| Assign: "(x ::= a, s) \<Rightarrow>\<^sub>g s(x := aval a s)"
| Seq: "\<lbrakk>(c\<^sub>1, s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>2;  (c\<^sub>2, s\<^sub>2) \<Rightarrow>\<^sub>g s\<^sub>3\<rbrakk> \<Longrightarrow> (c\<^sub>1;;c\<^sub>2, s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>3" 
| IfBlock: "\<lbrakk>(b,c) \<in> set gcs; bval b s; (c,s) \<Rightarrow>\<^sub>g s'\<rbrakk> \<Longrightarrow> (IF gcs FI, s) \<Rightarrow>\<^sub>g s'"
| DoTrue: "\<lbrakk>(b,c) \<in> set gcs; bval b s\<^sub>1; (c,s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>2;(DO gcs OD,s\<^sub>2) \<Rightarrow>\<^sub>g s\<^sub>3\<rbrakk> 
            \<Longrightarrow> (DO gcs OD, s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>3"
| DoFalse: "\<lbrakk>(\<forall> (b,c) \<in> set gcs. \<not> bval b s)\<rbrakk> \<Longrightarrow> (DO gcs OD, s) \<Rightarrow>\<^sub>g s" 

text \<open>Proof automation.\<close>

declare gbig_step.intros [intro]
lemmas gbig_step_induct[induct set] = gbig_step.induct[split_format(complete)]

inductive_simps Skip_simp: "(SKIP,s) \<Rightarrow>\<^sub>g t"
inductive_simps Assign_simp: "(x ::= a, s) \<Rightarrow>\<^sub>g t"
inductive_simps Seq_simp: "(c1 ;; c2, s) \<Rightarrow>\<^sub>g t"
inductive_simps IfBlock_simp: "(IF gs FI, s) \<Rightarrow>\<^sub>g t"
inductive_simps DoWhile_simp: "(DO gcs OD, s) \<Rightarrow>\<^sub>g t"

inductive_cases SkipE[elim!]: "(SKIP,s) \<Rightarrow>\<^sub>g t"
inductive_cases AssignE[elim!]: "(x ::= a, s) \<Rightarrow>\<^sub>g t"
inductive_cases SeqE[elim!]: "(c1 ;; c2, s) \<Rightarrow>\<^sub>g t"
inductive_cases IfBlockE[elim!]: "(IF gs FI, s) \<Rightarrow>\<^sub>g t"
inductive_cases DoWhileE[elim]: "(DO gcs OD, s) \<Rightarrow>\<^sub>g t"

section \<open>Some basic properties\<close>

text \<open>
 In contrast with IMP, GLC is non-deterministic.
\<close>

lemma determinism_counterexample:
  "gcs = [(Bc True,SKIP),(Bc True,s\<^sub>2 ::= (N 1))] \<Longrightarrow>
   c = IF gcs FI \<Longrightarrow>
   s = (\<lambda>x. 0)(s\<^sub>1 := 0, s\<^sub>2 := 0, s\<^sub>3 := 0) \<Longrightarrow>
   s' = s(s\<^sub>2 := 1) \<Longrightarrow> 
   s \<noteq> s' \<and> (c,s) \<Rightarrow>\<^sub>g s' \<and> (c,s) \<Rightarrow>\<^sub>g s
  "
  for s :: "string \<Rightarrow> int"
  by (metis IfBlock_simp Assign Skip aval.simps(1) bval.simps(1) 
            fun_upd_eqD fun_upd_triv list.set_intros(1) list.set_intros(2) 
            zero_neq_one)

lemma non_determinism: 
  "\<not> (\<forall> c s\<^sub>1 s\<^sub>2 s\<^sub>3. (c,s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>2 \<longrightarrow> (c,s\<^sub>2) \<Rightarrow>\<^sub>g s\<^sub>3 \<longrightarrow> s\<^sub>2 = s\<^sub>3)"
  by (meson determinism_counterexample)

text \<open>
 In contrast with IMP, the language is not total.
 This means that not every program configuration will lead to a final state.
\<close>

lemma totality_counterexample:
  "c = IF [] FI \<Longrightarrow> 
   s =  (\<lambda>x. 0)(s\<^sub>1 := 0) \<Longrightarrow>
   \<not> (\<exists> s'. (c,s) \<Rightarrow>\<^sub>g s')
  "
  by (simp add: IfBlock_simp)

lemma non_totality: "\<not> (\<forall> c s. (\<exists>s'. (c, s) \<Rightarrow>\<^sub>g s'))" 
  using totality_counterexample by blast

section \<open>Command equivalence\<close>

definition equiv_gc :: "com \<Rightarrow> com \<Rightarrow> bool" (infix "\<sim>\<^sub>g" 50) where
 "c \<sim>\<^sub>g c' \<equiv> (\<forall> s t. (c,s) \<Rightarrow>\<^sub>g t = (c',s) \<Rightarrow>\<^sub>g t)"

text \<open>
 The equivalence of guarded commands is an equivalence relation.
 The proof is analogous to the one in IMP.
\<close>
lemma equivI[intro?]: 
"\<lbrakk>\<And>s t . (c,s) \<Rightarrow>\<^sub>g t \<Longrightarrow> (c',s) \<Rightarrow>\<^sub>g t; 
  \<And>s t . (c',s) \<Rightarrow>\<^sub>g t \<Longrightarrow> (c,s) \<Rightarrow>\<^sub>g t\<rbrakk> 
  \<Longrightarrow> c \<sim>\<^sub>g c'"  
   by (auto simp: equiv_gc_def)
  
lemma equivD[dest]: "c \<sim>\<^sub>g c' \<Longrightarrow> (c,s) \<Rightarrow>\<^sub>g t \<longleftrightarrow> (c',s) \<Rightarrow>\<^sub>g t"  
  by (auto simp: equiv_gc_def)

lemma equiv_refl[simp, intro!]: "c \<sim>\<^sub>g c" by (blast intro: equivI)
lemma equiv_sym[sym]: "(c \<sim>\<^sub>g c') \<Longrightarrow> (c' \<sim>\<^sub>g c)" by (blast intro: equivI)
lemma equiv_trans[trans]: "c \<sim>\<^sub>g c' \<Longrightarrow> c' \<sim>\<^sub>g c'' \<Longrightarrow> c \<sim>\<^sub>g c''" by (blast intro: equivI)

text \<open>More advanced results for command equivalence\<close>

text \<open>Congruence lemma for Seq\<close>

lemma Seq_congruence:
  "c1 \<sim>\<^sub>g c1' \<Longrightarrow> c2 \<sim>\<^sub>g c2' \<Longrightarrow> c1;;c2 \<sim>\<^sub>g c1';;c2'" 
  by (simp add: Seq_simp equiv_gc_def)

text \<open>
 Congruence lemma for IfBlock.
 Sledgehammer will find a proof using smt. We prefer not to use
 this command for maintainability. 
\<close>

lemma IfBlock_congruence:
 assumes len: "length bs = n" "length cs = n" "length cs' = n"
 assumes alli: "\<And>i. i < n \<Longrightarrow> cs ! i \<sim>\<^sub>g cs' ! i"
 shows "IF (zip bs cs) FI \<sim>\<^sub>g IF (zip bs cs') FI" 
proof(rule equivI)
  fix s t
  assume l: "(IF zip bs cs FI, s) \<Rightarrow>\<^sub>g t"
  show "(IF zip bs cs' FI, s) \<Rightarrow>\<^sub>g t"
  proof -  
    obtain b c i where inv: "i < n \<and> (b,c) = (zip bs cs) ! i \<and> bval b s \<and> (c,s) \<Rightarrow>\<^sub>g t"
      by (metis (no_types, hide_lams) IfBlock_simp in_set_conv_nth l len(2) 
                length_zip min_less_iff_conj)
    then obtain c' where "(b,c') = (zip bs cs') ! i \<and> bval b s \<and> c' \<sim>\<^sub>g c"
      using alli equiv_sym len(1) len(2) len(3) by fastforce
    then show ?thesis 
      by (metis (no_types, lifting) IfBlock_simp equivD inv len(1) len(3) 
                length_zip min_less_iff_conj nth_mem)
  qed
next
 fix s t
 assume l: "(IF zip bs cs' FI, s) \<Rightarrow>\<^sub>g t"
 show "(IF zip bs cs FI, s) \<Rightarrow>\<^sub>g t"
 proof -  
   obtain b c i where inv: "i < n \<and> (b,c) = (zip bs cs') ! i \<and> bval b s \<and> (c,s) \<Rightarrow>\<^sub>g t"
     by (metis (no_types, lifting) IfBlock_simp in_set_conv_nth l len(1) length_zip 
               min_less_iff_conj)
   then obtain c' where "(b,c') = (zip bs cs) ! i \<and> bval b s \<and> c' \<sim>\<^sub>g c"
     using alli equiv_sym len(1) len(2) len(3) by fastforce
   then show ?thesis 
     by (metis (no_types, hide_lams) IfBlock_simp equivD inv len(1) len(2) 
               length_zip min.idem nth_mem)
 qed
qed
  
text \<open>
 Congruence lemma for DoWhile.
\<close>

lemma DoWhile_congruence': 
  assumes len: "length bs = n" "length cs = n" "length cs' = n"
  assumes alli: "\<And>i. i < n \<Longrightarrow> cs ! i \<sim>\<^sub>g cs' ! i"
  shows "(DO zip bs cs OD, s)  \<Rightarrow>\<^sub>g t \<Longrightarrow> (DO zip bs cs' OD, s)  \<Rightarrow>\<^sub>g t"
proof(induction "DO zip bs cs OD" s t rule: gbig_step_induct)
  {
   fix b c s\<^sub>1 s\<^sub>2 s\<^sub>3
   assume 0: "(b, c) \<in> set (zip bs cs)"
   assume 1: "bval b s\<^sub>1"
   assume 2: "(c,s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>2"
   assume 3: "(DO zip bs cs OD, s\<^sub>2) \<Rightarrow>\<^sub>g s\<^sub>3"
   assume 4: "(DO zip bs cs' OD, s\<^sub>2) \<Rightarrow>\<^sub>g s\<^sub>3"
   show 5: "(DO zip bs cs' OD, s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>3"
   proof -
     obtain i where 6: "i < n \<and> (b,c) = (zip bs cs) ! i" 
       by (metis "0" in_set_conv_nth len(2) length_zip min_less_iff_conj)
     obtain c' where "(b,c') = (zip bs cs') ! i \<and> (c',s\<^sub>1) \<Rightarrow>\<^sub>g s\<^sub>2" 
       using "2" "6" alli len by fastforce
     then show ?thesis 
       by (metis (no_types, lifting) "1" "4" "6" DoTrue len(1) len(3) length_zip 
                min_less_iff_conj nth_mem)
   qed
  }
  fix s
  assume 7: "\<forall> (b, c) \<in> set (zip bs cs). \<not> bval b s"
  show "(DO zip bs cs' OD, s) \<Rightarrow>\<^sub>g s"
  proof -
   have "\<forall> (b,c) \<in> set (zip bs cs'). \<not> bval b s" 
     by (metis (no_types, lifting) "7" case_prodD in_set_impl_in_set_zip1 
               in_set_zip len(1) len(2) nth_mem split_beta)
   then show ?thesis by blast
  qed
qed

lemma DoWhile_congruence:
 assumes len: "length bs = n" "length cs = n" "length cs' = n"
 assumes alli: "\<And>i. i < n \<Longrightarrow> cs ! i \<sim>\<^sub>g cs' ! i"
 shows "DO (zip bs cs) OD \<sim>\<^sub>g DO (zip bs cs') OD"
  apply(rule equivI)
  using DoWhile_congruence' alli len(1) len(2) len(3) apply blast
  using DoWhile_congruence' alli equiv_sym len(1) len(2) len(3) by presburger
  
text \<open>
 As an application of command equivalence, we prove that the order of 
 the guards does not affect the semantics of the guarded constructs.
\<close>

lemma IfBlock_guards_order:
  "set gcs = set gcs' \<Longrightarrow> IF gcs FI \<sim>\<^sub>g IF gcs' FI"
  by (simp add: IfBlock_simp equiv_gc_def)

lemma DoWhile_guards_order':
  assumes "set gcs = set gcs'"
  shows "(DO gcs OD, s) \<Rightarrow>\<^sub>g t \<Longrightarrow> (DO gcs' OD, s) \<Rightarrow>\<^sub>g t"
  apply(induction "DO gcs OD" s t rule: gbig_step_induct)
  using assms by blast+

lemma DoWhile_guards_order:
  "set gcs = set gcs' \<Longrightarrow> DO gcs OD \<sim>\<^sub>g DO gcs' OD"
  apply(simp add: equiv_gc_def)
  by (metis DoWhile_guards_order')

lemma seq_associative: "c1 ;; (c2 ;; c3) \<sim>\<^sub>g (c1 ;; c2) ;; c3"
  using equiv_gc_def by auto

lemma seq_end_skip: "c1 ;; c2 ;; SKIP \<sim>\<^sub>g c1 ;; c2 "
  using equiv_gc_def by auto

fun guard :: "(bexp \<times> com) list \<Rightarrow> bexp" where
"guard [] = (Bc True)" |
"guard ((b,c) # gcs) = (BBinop (\<lambda> b1 b2. b1 \<or> b2) b (guard gcs))"

lemma do_empty_skip: "(DO [] OD) \<sim>\<^sub>g SKIP" 
  by (metis DoWhile_simp Skip SkipE empty_iff equiv_gc_def list.set(1))

lemma empty_skip: "(IF [(guard [], SKIP)] FI, s) \<Rightarrow>\<^sub>g t = (SKIP, s) \<Rightarrow>\<^sub>g t"
proof -
  {assume 0: "(IF [(guard [], SKIP)] FI, s) \<Rightarrow>\<^sub>g t"
  have "bval (Bc True) s \<and> (Bc True,SKIP) \<in> set ([(guard [], SKIP)])" by simp
  then have "s = t" using IfBlock_simp "0" by auto
  then have "(SKIP, s) \<Rightarrow>\<^sub>g t" by blast}
  note case1 = this
  {assume "(SKIP, s) \<Rightarrow>\<^sub>g t"
  then have "s = t" by auto
  have "bval (Bc True) s \<and> (Bc True,SKIP) \<in> set ([(guard [], SKIP)])" by simp
  then have "(IF [(guard [], SKIP)] FI, s) \<Rightarrow>\<^sub>g s" by blast
  then have "(IF [(guard [], SKIP)] FI, s) \<Rightarrow>\<^sub>g t" by (simp add: \<open>s = t\<close>)}
  note case2 = this
  from case1 case2 show ?thesis by blast
qed

lemma "
(\<forall> s t. (DO gcs OD, s) \<Rightarrow>\<^sub>g t = (IF (guard gcs, SKIP) # gcs FI;; DO gcs OD, s) \<Rightarrow>\<^sub>g t) \<Longrightarrow>
(DO a # gcs OD, s) \<Rightarrow>\<^sub>g t =
          (IF (guard (a # gcs), SKIP) # a # gcs FI;; DO a # gcs OD, s) \<Rightarrow>\<^sub>g t"
proof -
  assume "(\<forall> s t. (DO gcs OD, s) \<Rightarrow>\<^sub>g t = 
          (IF (guard gcs, SKIP) # gcs FI;; DO gcs OD, s) \<Rightarrow>\<^sub>g t)"
  assume "(DO a # gcs OD, s) \<Rightarrow>\<^sub>g t"
  then have "(IF (guard (a # gcs), SKIP) # a # gcs FI;; DO a # gcs OD, s) \<Rightarrow>\<^sub>g t"
  proof(induction "(DO a # gcs OD, s) \<Rightarrow>\<^sub>g t"  rule: gbig_step.induct)


qed
  oops

lemma if_empty_skip: "(IF [(guard [], SKIP)] FI) \<sim>\<^sub>g SKIP"  
  using empty_skip equiv_gc_def by blast

lemma "
  (DO gcs OD) \<sim>\<^sub>g (IF ((guard gcs,SKIP) # gcs) FI ;; (DO gcs OD)) 
"
  unfolding equiv_gc_def
proof(induction gcs)
case Nil
  then show ?case using empty_skip by auto
next
case (Cons a gcs)
  then show ?case 
    
    sorry
qed

lemma "finite {t. (c,s) \<Rightarrow>\<^sub>g t}"
  apply(induction "(c,s)"  rule: gbig_step.induct)
  oops

end