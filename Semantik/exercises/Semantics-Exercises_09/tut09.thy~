theory tut09
  imports "IMP2.VCG" "IMP2.Examples"
          
begin

definition succs where
 "succs a i \<equiv> a ` {i+1..< a i}" for a :: "int \<Rightarrow> int"

definition Edges where
 "Edges a \<equiv> {(i,j). j \<in> succs a i}"

program_spec get_succs
  assumes "j \<le> stop"
  ensures "True"
defines
\<open>
  while (j < stop)
  @invariant \<open>(\<forall> i \<in> {j\<^sub>0..<j}. visited i = 0 \<longrightarrow> stack i \<in> (Edges a)\<^sup>* `` {j\<^sub>0})  :: bool\<close>
  @variant \<open>nat (stop - j)\<close>
  {
    succ = a[j];
    if (visited[succ] == 0) {
     stack[i] = succ;
     i = i + 1
    };
    j = j + 1
  }
\<close>
  apply vcg_cs
 
  sorry

program_spec (partial) dfs
assumes "0 \<le> x \<and> 0 \<le> s"
ensures "b = 1 \<longrightarrow> x \<in> (Edges a)\<^sup>* `` {s}"
defines \<open>
 b = 0;
 i = 1;
 stack[0] = s;
 while (b == 0 \<and> i \<noteq> 0)
  @invariant\<open>0 \<le> i \<and> 
             (\<forall> j \<in> {0..<i}. stack j \<in> (Edges a)\<^sup>* `` {s}) \<and>
             (b = 1 \<longrightarrow> stack i = x)\<close>
 {
  i = i - 1;
  next = stack[i];
  if (next == x) {
   b = 1
  } else {
   visited[next] = 1;
   stop = a[next];
   j = next + 1;
   if(j \<le> stop){
    inline get_succs
   }
  }
 }
\<close>
  apply vcg_cs
  subgoal 
    unfolding set_lran by auto
  subgoal for s\<^sub>0 x\<^sub>0 sb i a x stack visited i stack'
    apply safe
    apply (rule rtrancl_into_trancl)
  sorry

end