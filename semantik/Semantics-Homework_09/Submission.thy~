theory Submission
  imports Defs
begin

(****************************** Exercise 1 **********************************)

(* array_assign is automatically proven by auto *)

lemma impa1: "(x[] ::= a;; a[] ::= x,s) \<Rightarrow> t \<Longrightarrow> (x[] ::= a,s) \<Rightarrow> t"
  by (metis (mono_tags, hide_lams) ArrayCpy Seq big_step_determ fun_upd_apply fun_upd_triv fun_upd_twist)

lemma impa2: "(x[] ::= a,s) \<Rightarrow> t \<Longrightarrow> (x[] ::= a;; a[] ::= x,s) \<Rightarrow> t"
  by (metis (mono_tags, hide_lams) ArrayCpy Seq big_step_determ fun_upd_apply fun_upd_triv)

theorem array_assign: "(x[] ::= a;; a[] ::= x) \<sim> (x[] ::= a)"
  by (simp add: Semantics.equivI impa1 impa2)

(* Semantic criterion *)

(*
 How to picture the problem:

 A useful way to picture this explanation is to imagine a "memory" arranged
 as an infinite matrix. The rows of the matrix are the arrays that are available.
 The columns are the integer indexes we can access. 

 Explanation:

 The commands are not in general equivalent because the command x[i] ::= a[j]
 can potentially change the indexes i and j. Imagining the grid above, this 
 results in modifying with a[j] ::= x[i] cells, that would not be modified without
 this command. 

 In this situation we need extra assumptions on the state of the memory to prove
 the goal. The following is automatic:
                                                          
*)

theorem sufficient0:
  "(\<forall> s s' .(x[i] ::= Vidx a j, s) \<Rightarrow> s' \<longrightarrow>
         (aval i s \<noteq> aval i s' \<or>
         aval j s \<noteq> aval j s') \<and>
         aval (Vidx a j) s' = aval (Vidx x i) s'
    ) \<Longrightarrow>
   (x[i] ::= Vidx a j;; a[j] ::= Vidx x i) \<sim> (x[i] ::= Vidx a j)"
  by (metis (mono_tags, hide_lams) AssignIdx aval.simps(2) fun_upd_triv)

(* 
 A bit more difficult is to show such a semantic condition when one assumes
 that the indexes i,j are the same in states s,s'.
*)

lemma impb1: "(x[i] ::= Vidx a j, s) \<Rightarrow> s' \<Longrightarrow>
         aval i s = aval i s' \<Longrightarrow>
         aval j s = aval j s' \<Longrightarrow>
         (x[i] ::= Vidx a j;; a[j] ::= Vidx x i, s) \<Rightarrow> t \<Longrightarrow> 
              (x[i] ::= Vidx a j, s) \<Rightarrow> t"
  by (smt AssignIdxE SeqE aval.simps(2) fun_upd_idem fun_upd_other fun_upd_same) 

lemma impb2: "(x[i] ::= Vidx a j, s) \<Rightarrow> s' \<Longrightarrow>
         aval i s = aval i s' \<Longrightarrow>
         aval j s = aval j s' \<Longrightarrow>
         (x[i] ::= Vidx a j, s) \<Rightarrow> t \<Longrightarrow> 
              (x[i] ::= Vidx a j;; a[j] ::= Vidx x i, s) \<Rightarrow> t"
  by (smt Assign' AssignIdxE Seq aval.simps(2) fun_upd_apply fun_upd_idem_iff)

theorem sufficient1:
  "(\<forall> s s' .(x[i] ::= Vidx a j, s) \<Rightarrow> s' \<longrightarrow>
         aval i s = aval i s' \<and>
         aval j s = aval j s') \<Longrightarrow>
   (x[i] ::= Vidx a j;; a[j] ::= Vidx x i) \<sim> (x[i] ::= Vidx a j)"
  by (meson Assign' equiv_c_def impb1 impb2)

(* Syntactic criterion *)

(*
 We try now to give conditions on the structure of the term so that we can 
 ensure the interesting condition above, namely, theorem sufficient1.

 A way to ensure this is to guarantee that the array x is not accessed while
 computing i or j as expressions. The following function looks for an access
 in the expression to x[i]:
*)

fun syntactic_subterm :: "aexp \<Rightarrow> aexp \<Rightarrow> bool" where
"syntactic_subterm (Vidx x i) (Vidx y j) = 
 ((x = y \<and> i = j) \<or> syntactic_subterm (Vidx x i) j)" |
"syntactic_subterm (Vidx x i) (Unop f t) = 
  syntactic_subterm (Vidx x i) t" |
"syntactic_subterm (Vidx x i) (Binop f t1 t2) = 
  (syntactic_subterm (Vidx x i) t1 \<or> syntactic_subterm (Vidx x i) t2)" |
"syntactic_subterm _ _ = False" 

definition no_x where
"no_x x j \<longleftrightarrow> (\<forall> l. \<not> syntactic_subterm (Vidx x l) j)"

lemma imp_sufficient1: "
  no_x x j \<Longrightarrow>
  (x[i] ::= a, s) \<Rightarrow> s' \<Longrightarrow>
  aval j s = aval j s' 
"
  apply(simp add: no_x_def)
  apply(erule AssignIdxE)
  apply(induction "j")
  apply auto
  done

(*
 The theorem in this case says, if we don't have any access to x then the commands
 are equivalent. 
*)

theorem syntactic_sufficient1: "
       no_x x j \<Longrightarrow>
       no_x x i \<Longrightarrow>
       (x[i] ::= Vidx a j;; a[j] ::= Vidx x i) \<sim> (x[i] ::= Vidx a j)
"
  by (simp add: imp_sufficient1 sufficient1)

(*
 This is quite a strong condition but it is established only by syntactic 
 constructions. In the following, we mix both approaches by stating that
 only accesses at (semantic) position i, are allowed.
*)

fun semantic_subterm :: "aexp \<Rightarrow> aexp \<Rightarrow> state \<Rightarrow> bool" where
"semantic_subterm (Vidx x i) (Vidx y j) s  = 
 ((x = y \<and> aval i s = aval j s) \<or> (semantic_subterm (Vidx x i) j) s)" |
"semantic_subterm (Vidx x i) (Unop f t) s = 
  semantic_subterm (Vidx x i) t s" |
"semantic_subterm (Vidx x i) (Binop f t1 t2) s = 
  (semantic_subterm (Vidx x i) t1 s \<or> semantic_subterm (Vidx x i) t2 s)" |
"semantic_subterm _ _ _ = False" 

definition no_x_i where
"no_x_i x j s i \<longleftrightarrow> (\<not> semantic_subterm (Vidx x i) j s)"

lemma aux_imp_sufficient2: "
  no_x_i x j s i \<Longrightarrow>
  (x[i] ::= a, s) \<Rightarrow> s' \<Longrightarrow>
  aval j s = aval j s' 
"
  apply(simp add: no_x_i_def)
  apply(erule AssignIdxE)
  apply(induction "j")
  apply auto
  done

lemma imp_semantic_sufficient1: "
  no_x_i x j s i \<Longrightarrow>
  no_x_i x i s i \<Longrightarrow>
  (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,s) \<Rightarrow> t \<Longrightarrow>
  (x[i] ::= Vidx a j,s) \<Rightarrow> t
"
  by (meson SeqE aux_imp_sufficient2 impb1)

lemma imp_semantic_sufficient2: "
  no_x_i x j s i \<Longrightarrow>
  no_x_i x i s i \<Longrightarrow>
  (x[i] ::= Vidx a j,s) \<Rightarrow> t \<Longrightarrow>
  (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,s) \<Rightarrow> t 
"
  by (simp add: aux_imp_sufficient2 impb2)

theorem semantic_sufficient: "
  (\<forall> s. no_x_i x j s i \<and> no_x_i x i s i) \<Longrightarrow>
  (x[i] ::= Vidx a j) \<sim> (x[i] ::= Vidx a j;; a[j] ::= Vidx x i)
"
  by (meson aux_imp_sufficient2 equiv_sym sufficient1)


(****************************** Exercise 2 *******************************)

program_spec array_filter
  assumes "l\<le>h"
  ensures "l \<le> bi \<and> bi \<le> h \<and> 
           l \<le> ci \<and> ci \<le> h \<and>
           (ci - l + bi - l = h - l) \<and>
           lran b l\<^sub>0 bi = filter (\<lambda>x. x\<ge>0) (lran a\<^sub>0 l\<^sub>0 h\<^sub>0) \<and>
           lran c l\<^sub>0 ci = filter (\<lambda>x. x<0) (lran a\<^sub>0 l\<^sub>0 h\<^sub>0)"
  defines \<open>
    bi=l; j=l; ci=l; 
    while (j<h) 
      @invariant \<open> 
          l\<le>bi \<and> bi\<le>j \<and> j\<le>h     
        \<and> l\<le>ci \<and> ci\<le>j \<and> j\<le>h 
        \<and> ci - l + bi - l = j - l
        \<and> lran b l bi = filter (\<lambda>x. x \<ge> 0) (lran a\<^sub>0 l j)
        \<and> lran c l ci = filter (\<lambda>x. x<0) (lran a\<^sub>0 l j)
        \<and> lran b j h = lran b\<^sub>0 j h
      \<close>
      @variant \<open>nat (h-j)\<close>
    {
      if (a[j]\<ge>0) {b[bi] = a[j]; bi=bi+1}
      else {c[ci] = a[j]; ci=ci+1};
      j=j+1
    }
  \<close>
  supply lran_eq_iff[simp] lran_tail[simp del]
  apply vcg_cs
  done

program_spec append_sorted
  assumes "l \<le> bi \<and> bi \<le> (ci+bi-l) \<and> 
           l \<le> ci \<and> ci \<le>(ci+bi-l)"
  ensures "(lran a l bi = lran b l bi) \<and>
           (lran a bi (ci+bi-l) = lran c l ci)"
defines
\<open>
t = l;
while(t < bi)
 @invariant \<open>l \<le> t \<and> t \<le> bi \<and>
             (lran a l t = lran b l t)\<close>
 @variant \<open>nat (bi-t)\<close>
{
 a[t] = b[t];
 t = t+1
};

t = l;
while(t < ci)
 @invariant \<open>l \<le> t \<and> t \<le> ci \<and> 
             (lran a l bi = lran b l bi) \<and>
             (lran a bi (t+bi-l) = lran c l t)\<close>
 @variant \<open>nat (ci-t)\<close>
{
 a[t+bi-l] = c[t];
 t = t+1
}
\<close>          
  apply vcg_cs
  by (smt fun_upd_same lran_bwd_simp lran_upd_outside(2))

  
program_spec partition
  assumes "l\<le>h"
  ensures "mset_ran a {l\<^sub>0..<i} = filter_mset (\<lambda>x. x \<ge> 0) (mset_ran a\<^sub>0 {l\<^sub>0..<h\<^sub>0})
         \<and> mset_ran a {i..<h\<^sub>0} = filter_mset (\<lambda>x. x < 0) (mset_ran a\<^sub>0 {l\<^sub>0..<h\<^sub>0})"
defines
\<open>
a[] = a; 
i = 0;
j = l; 
i = h; 
temp = i;
inline array_filter;
inline append_sorted;
i = bi
\<close>
  apply vcg_cs
  by (metis mset_filter mset_lran)

(************************* Exercise 3 *********************************)

lemma length_lemma: "0 < len \<Longrightarrow> lran a i j = lran b 0 len \<Longrightarrow> len = j - i"
  by (metis diff_0_right diff_self diff_strict_mono length_lran 
      less_irrefl linorder_neqE_linordered_idom nat_mono_iff)

lemma imp1e: "l \<le> h \<Longrightarrow> 0 < len \<Longrightarrow>
(\<exists> i. l \<le> i \<and> i+len \<le> h \<and> lran a i (i+len) = lran b 0 len) \<Longrightarrow>
(\<exists>as bs. lran a l h = as @ lran b 0 len @ bs)
" 
proof - 
  assume "l\<le>h"
  assume "0 < len"
  assume 1:"\<exists> i. l \<le> i \<and> i+len \<le> h \<and> lran a i (i+len) = lran b 0 len"
  from this obtain i where 2:"l \<le> i \<and> i+len \<le> h \<and> lran a i (i+len) = lran b 0 len"
    by blast
  from this have 3: "lran a l h = lran a l i @ lran a i h" 
    by (metis \<open>0 < len\<close> add.commute lran_split not_less pos_add_strict)
  have 4: "lran a i h = lran a i (i+len) @ lran a (i+len) h" 
    by (metis "2" \<open>0 < len\<close> add.commute add_increasing le_less lran_split)
  show ?thesis using "2" "3" "4" by auto
qed

lemma imp2e: "l \<le> h \<Longrightarrow> 0 < len \<Longrightarrow>
(\<exists>as bs. lran a l h = as @ lran b 0 len @ bs) \<Longrightarrow>
(\<exists> i. l \<le> i \<and> i+len \<le> h \<and> lran a i (i+len) = lran b 0 len)
"
proof -
  assume "l\<le>h"
  assume "0 < len"
  assume "\<exists>as bs. lran a l h = as @ lran b 0 len @ bs"
  from this obtain as bs where "lran a l h = as @ lran b 0 len @ bs" by blast
  from this have "\<exists> i j. l \<le> i \<and> j \<le> h \<and> lran a i j = lran b 0 len" 
    by (metis \<open>l \<le> h\<close> lran_eq_iff')
  from this obtain j i where "l \<le> i \<and> j \<le> h \<and> lran a i j = lran b 0 len" by blast
  from this have "j = i + len" 
    using \<open>0 < len\<close> length_lemma by fastforce
  from this have "l \<le> i \<and> (i+len) \<le> h \<and> lran a i (i+len) = lran b 0 len"
    using \<open>l \<le> i \<and> j \<le> h \<and> lran a i j = lran b 0 len\<close> by auto
  from this have "\<exists> i. l \<le> i \<and> i+len \<le> h \<and> lran a i (i+len) = lran b 0 len"
    by blast
  from this show ?thesis by simp
qed

lemma equiv: "l \<le> h \<Longrightarrow> 0 < len \<Longrightarrow>
(\<exists>as bs. lran a l h = as @ lran b 0 len @ bs) =
(\<exists> i. l \<le> i \<and> i+len \<le> h \<and> lran a i (i+len) = lran b 0 len)
"
  using imp1e imp2e lran_eq_iff' by blast
 

program_spec substring_step
  assumes "0 \<le> len \<and> j = 0 \<and> i < h"
  ensures "0 \<le> j \<and> j \<le> len \<and> i+j \<le> h \<and> lran a i (i+j) = lran b 0 j \<and>
           (j = len \<or> i+j = h \<or> a (i+j) \<noteq> b j)"
  for l h len match a[] b[]
defines \<open>
while(a[i+j] == b[j] \<and> j < len \<and> i+j < h)
 @invariant \<open>0 \<le> j \<and> j \<le> len \<and> i+j \<le> h \<and>
             lran a i (i+j) = lran b 0 j\<close>
 @variant \<open>nat (len - j)\<close>
{
 j = j + 1
}
\<close>
  apply vcg_cs
  apply (simp add: lran_bwd_simp)
  done

lemma range_equality: 
     "lran a\<^sub>0 i (i + len\<^sub>0) = lran b\<^sub>0 0 len\<^sub>0 \<Longrightarrow> 
       \<forall> t. (0 \<le> t \<and> t < len\<^sub>0) \<longrightarrow> a\<^sub>0 (i+t) = b\<^sub>0 t" 
proof 
  assume 0: "lran a\<^sub>0 i (i + len\<^sub>0) = lran b\<^sub>0 0 len\<^sub>0"
  fix t
  show "(0 \<le> t \<and> t < len\<^sub>0) \<longrightarrow> a\<^sub>0 (i+t) = b\<^sub>0 t"
  proof 
    assume 1: "0 \<le> t \<and> t < len\<^sub>0"
    show "a\<^sub>0 (i+t) = b\<^sub>0 t"
    proof - 
      have 2: "lran a\<^sub>0 i (i+len\<^sub>0) = lran a\<^sub>0 i (i+t) @ lran a\<^sub>0 (i+t) (i+len\<^sub>0)"
        by (smt "1" lran_split)
      have 3: "lran b\<^sub>0 0 len\<^sub>0 = lran b\<^sub>0 0 t @ lran b\<^sub>0 t len\<^sub>0" 
        by (meson "1" le_less lran_split)
      have 4: "length (lran a\<^sub>0 (i+t) (i+len\<^sub>0)) = length (lran b\<^sub>0 t len\<^sub>0)" by simp
      then have 5: "lran a\<^sub>0 (i+t) (i+len\<^sub>0) = (lran b\<^sub>0 t len\<^sub>0)" 
        using "0" "2" "3" by auto
      have 6: "i+t < i+len\<^sub>0 \<and> t < len\<^sub>0" by (simp add: "1")
      have 7: "a\<^sub>0 (i+t) = hd (lran a\<^sub>0 (i+t) (i+len\<^sub>0))" by (simp add: "1")
      have 8: "b\<^sub>0 t = hd (lran b\<^sub>0 t len\<^sub>0)" by (simp add: "1")
      show "a\<^sub>0 (i+t) = b\<^sub>0 t" by (simp add: "5" "7" "8") 
    qed
  qed
qed

program_spec substring_sequence
  assumes "0 < len \<and> j = 0 \<and> l \<le> h \<and> match = 0"
  ensures "(match = 0 \<longleftrightarrow> (\<forall> t. (l \<le> t \<and>  t+len \<le> h \<and> t < h) 
                                \<longrightarrow> lran a t (t+len\<^sub>0) \<noteq> lran b 0 len))
           \<and> ((match = 0 \<and> \<not> match = 1) \<or> ( match = 1 \<and> \<not> match = 0))"
  for l h len match a[] b[]
defines \<open>
i = l;
while(i < h)
 @invariant \<open>
   l \<le> i \<and> i \<le> h \<and> 0 \<le> j \<and> j \<le> len \<and> ((match = 0 \<and> \<not> match = 1) \<or> ( match = 1 \<and> \<not> match = 0)) \<and>
   (match = 0 \<longleftrightarrow> (\<forall> t. (l \<le> t \<and>  t+len \<le> h \<and> t <  i) 
                    \<longrightarrow> lran a t (t+len\<^sub>0) \<noteq> lran b 0 len))
 \<close>
 @variant \<open>nat (h-i)\<close>
{
 j = 0;
 inline substring_step;
 if(j == len){
  match = 1
 };
 i = i + 1
}
\<close>
  apply vcg_cs
  apply blast  
  by (metis add_le_cancel_left  le_less not_le range_equality 
      zle_add1_eq_le zless_add1_eq)

lemma then_case: "
l\<^sub>0 \<le> h\<^sub>0 \<Longrightarrow>
0 < len\<^sub>0 \<Longrightarrow>
(match = 0) =
(\<forall>t. l\<^sub>0 \<le> t \<and> t + len\<^sub>0 \<le> h\<^sub>0 \<and> t < h\<^sub>0 \<longrightarrow>
   lran a\<^sub>0 t (t + len\<^sub>0) \<noteq> lran b\<^sub>0 0 len\<^sub>0)  \<Longrightarrow>
match = 0 \<and> match \<noteq> 1 \<or> match = 1 \<and> match \<noteq> 0 \<Longrightarrow>
  (match = 1) = (\<exists>as bs. lran a\<^sub>0 l\<^sub>0 h\<^sub>0 = as @ lran b\<^sub>0 0 len\<^sub>0 @ bs)"  
proof -
  assume 0: "l\<^sub>0 \<le> h\<^sub>0"
  assume 1: "0 < len\<^sub>0"
  assume 2: "match = 0 \<and> match \<noteq> 1 \<or> match = 1 \<and> match \<noteq> 0"
  assume 3: "(match = 0) =
             (\<forall>t. l\<^sub>0 \<le> t \<and> t + len\<^sub>0 \<le> h\<^sub>0 \<and> t < h\<^sub>0 \<longrightarrow>
             lran a\<^sub>0 t (t + len\<^sub>0) \<noteq> lran b\<^sub>0 0 len\<^sub>0)"
  show ?thesis 
  proof 
    assume 4: "match = 1"
     have 5: "\<not> (match = 0)" using "2" "4" by auto
     have 6: "\<exists> t. l\<^sub>0 \<le> t \<and> t + len\<^sub>0 \<le> h\<^sub>0 \<and> t < h\<^sub>0 \<and> 
               lran a\<^sub>0 t (t + len\<^sub>0) = lran b\<^sub>0 0 len\<^sub>0"
      using "3" "5" by blast
    from this have 7:
      "\<exists>i\<ge>l\<^sub>0. i + len\<^sub>0 \<le> h\<^sub>0 \<and> lran a\<^sub>0 i (i + len\<^sub>0) = lran b\<^sub>0 0 len\<^sub>0"  
      by auto
    have
       "(\<exists>as bs. lran a\<^sub>0 l\<^sub>0 h\<^sub>0 = as @ lran b\<^sub>0 0 len\<^sub>0 @ bs)" 
      by (simp add: 0 1 7 imp1e[of l\<^sub>0 h\<^sub>0 len\<^sub>0 a\<^sub>0 b\<^sub>0])
    then show "\<exists>as bs. lran a\<^sub>0 l\<^sub>0 h\<^sub>0 = as @ lran b\<^sub>0 0 len\<^sub>0 @ bs" by auto
  next
    assume 4: "\<exists>as bs. lran a\<^sub>0 l\<^sub>0 h\<^sub>0 = as @ lran b\<^sub>0 0 len\<^sub>0 @ bs"
    have 5: "\<exists>i\<ge>l\<^sub>0. i + len\<^sub>0 \<le> h\<^sub>0 \<and> lran a\<^sub>0 i (i + len\<^sub>0) = lran b\<^sub>0 0 len\<^sub>0"
     by (simp add: "0" "1" "4" imp2e)
    have "match = 1" 
       using "1" "2" "3" "5"  add_increasing2 by auto
    then show "match = 1" by auto
  qed
qed

program_spec substring_final
  assumes "l \<le> h \<and> 0 \<le> len"
  ensures "match = 1 \<longleftrightarrow> (\<exists>as bs. lran a l\<^sub>0 h\<^sub>0 = as @ lran b 0 len @ bs)"
  for l h len match a[] b[]
defines \<open>
match = 0;
j = 0;
if(len > 0){
 inline substring_sequence
} else {
 match = 1
}
\<close>
  apply vcg_cs
  apply(erule then_case)  
   by blast+

(* sledgehammer does not work directly for one of the subgoals
   even if we provided the very same lemma above !
 *)
  
end