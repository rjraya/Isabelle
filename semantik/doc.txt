lemma "
 (?a. ¬ contains_index (Vidx x i) j ?
  s' = s(x := (s x)(aval i s := aval a s)) ? 
  aval j s = aval j s') ?
 ¬ contains_index (Vidx x i) (Vidx x1a j) ?
 s' = s(x := (s x)(aval i s := aval a s)) ?
 aval (Vidx x1a j) s = aval (Vidx x1a j) s'
"
proof -
  assume 0: "(?a. ¬ contains_index (Vidx x i) j ?
  s' = s(x := (s x)(aval i s := aval a s)) ? 
  aval j s = aval j s')"
  assume 1: "¬ contains_index (Vidx x i) (Vidx x1a j)"
  assume 2: "s' = s(x := (s x)(aval i s := aval a s))"
  from 1 have "¬ contains_index (Vidx x i) j" by simp
  from this 0 2 have 3: "aval j s = aval j s'" by simp
  from this have "aval (Vidx x1a j) s = s x1a (aval j s')" by simp
  have "aval (Vidx x1a j) s' = s' x1a (aval j s')" by simp

  {assume "x1a = x ? aval j s ? aval i s"
  have "aval (Vidx x j) s = aval (Vidx x j) s'" 
    using "2" "3" ‹x1a = x ? aval j s ? aval i s› by auto} 

  {assume "x1a ? x"
  have "aval (Vidx x1a j) s = aval (Vidx x1a j) s'" 
    by (simp add: "2" "3" ‹x1a ? x›)}
  {assume "x1a = x  ? j ? i"
  have "aval (Vidx x j) s = aval (Vidx x j) s'"
  }

  show "aval (Vidx x1a j) s = aval (Vidx x1a j) s'" 
qed
  oops


-------------------------------


lemma non_recursive_index: "i ? (Vidx x i)"
  by (metis One_nat_def add_le_cancel_left aexp.size(6) 
      le_add_same_cancel1 nat_le_linear not_one_le_zero)
  

lemma "¬ subterm i i"
 

                 

lemma "¬ subterm (Vidx x (Vidx x1a i)) i"
  

lemma "¬ subterm (Vidx x i) i"
proof (induction "i" arbitrary: x)
  case (N x)
  then show ?case by simp
next
  case (Vidx x1a i)
  then show ?case 
  proof - 
    assume 0: "(?x. ¬ subterm (Vidx x i) i)"
    show "¬ subterm (Vidx x (Vidx x1a i)) (Vidx x1a i)"
    proof - 
      have 1: "subterm (Vidx x (Vidx x1a i)) (Vidx x1a i) ? 
               ((x = x1a ? (Vidx x1a i) = i) ? 
                subterm (Vidx x (Vidx x1a i)) i)" by simp
      have 2: "(Vidx x1a i) ? i" by (metis non_recursive_index)
      from 1 2 have 4: "
               subterm (Vidx x (Vidx x1a i)) (Vidx x1a i) ? 
               (subterm (Vidx x (Vidx x1a i)) i)" by simp
      have "¬ (subterm (Vidx x (Vidx x1a i)) i)" 
    qed
  qed  
  sorry
next
case (Unop x1a i)
  then show ?case sorry
next
  case (Binop x1a i1 i2)
  then show ?case sorry
qed

 