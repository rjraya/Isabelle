(**
  Partial file, to be completed during lecture or tutorial.
  See Wp.thy for completed version!
**)
theory Wp_Demo
imports Big_Step "HOL-Eisbach.Eisbach_Tools"
begin
  section \<open>Weakest Precondition\<close>

  subsection \<open>Weakest (liberal) Precondition\<close>

  text \<open>Weakest precondition: 
    \<open>c\<close> terminates with a state that satisfies \<open>Q\<close>, when started from \<open>s\<close>\<close>
  definition "wp c Q s \<equiv> \<exists>t. (c,s) \<Rightarrow> t \<and> Q t"
    \<comment> \<open>Note that this definition exploits that the semantics is deterministic! 
      In general, we must ensure absence of infinite executions\<close>
    
  text \<open>Weakest liberal precondition: 
    If \<open>c\<close> terminates when started from \<open>s\<close>, the new state satisfies \<open>Q\<close>.\<close>    
  definition "wlp c Q s \<equiv> \<forall>t. (c,s) \<Rightarrow> t \<longrightarrow> Q t"

  lemma wp_imp_wlp: "wp c Q s \<Longrightarrow> wlp c Q s"
    unfolding wp_def wlp_def
    apply auto
    apply (drule big_step_determ)
    apply assumption
    by simp
    (*
    thm big_step_determ
    apply (auto dest: big_step_determ)
    done*)
    
  lemma wlp_and_term_imp_wp: "wlp c Q s \<and> (c,s) \<Rightarrow> t \<Longrightarrow> wp c Q s"  
    unfolding wp_def wlp_def
    by auto    
  
  lemma wp_equiv: "c \<sim> c' \<Longrightarrow> wp c = wp c'"
    apply (intro ext)
    apply (auto simp: wp_def)
    done
      
  lemma wp_conseq: "wp c P s \<Longrightarrow> \<lbrakk>\<And>s. P s \<Longrightarrow> Q s\<rbrakk> \<Longrightarrow> wp c Q s"
    by (auto simp: wp_def)
    
  subsection \<open>Weakest Preconditions of Loop-Free Commands\<close>  
    
  context 
    notes [simp] = wp_def wlp_def \<comment> \<open>Locally enable unfolding\<close>
  begin  
    lemma wp_skip_eq: "wp SKIP Q s = Q s" by auto
    lemma wp_assign_eq: "wp (x::=a) Q s = Q (s(x:=aval a s))" by auto
    lemma wp_seq_eq: "wp (c\<^sub>1;;c\<^sub>2) Q s = wp c\<^sub>1 (wp c\<^sub>2 Q) s" by auto
    lemma wp_if_eq: "wp (IF b THEN c\<^sub>1 ELSE c\<^sub>2) Q s = (if bval b s then wp c\<^sub>1 Q s else wp c\<^sub>2 Q s)" by auto
    
    lemmas wp_eq = wp_skip_eq wp_assign_eq wp_seq_eq    
    lemmas wp_eq' = wp_eq wp_if_eq
    
    text \<open>The same for \<open>wlp\<close>\<close>
    lemma wlp_skip_eq: "wlp SKIP Q s = Q s" by auto
    lemma wlp_assign_eq: "wlp (x::=a) Q s = Q (s(x:=aval a s))" by auto
    lemma wlp_seq_eq: "wlp (c\<^sub>1;;c\<^sub>2) Q s = wlp c\<^sub>1 (wlp c\<^sub>2 Q) s" by auto
    lemma wlp_if_eq: "wlp (IF b THEN c\<^sub>1 ELSE c\<^sub>2) Q s = (if bval b s then wlp c\<^sub>1 Q s else wlp c\<^sub>2 Q s)" by auto
    
    lemmas wlp_eq = wlp_skip_eq wlp_assign_eq wlp_seq_eq    
    lemmas wlp_eq' = wlp_eq wlp_if_eq
    
    lemma wlp_equiv: "c \<sim> c' \<Longrightarrow> wlp c = wlp c'" by (intro ext) auto
    lemma wlp_conseq: "wlp c P s \<Longrightarrow> \<lbrakk>\<And>s. P s \<Longrightarrow> Q s\<rbrakk> \<Longrightarrow> wlp c Q s" by auto
  end    


  subsection \<open>Weakest Liberal Precondition of While\<close>

  lemma wlp_while_unfold: 
    "wlp (WHILE b DO c) Q s 
    = (if bval b s then wlp c (wlp (WHILE b DO c) Q) s else Q s)"
    apply (subst wlp_equiv[OF while_unfold])
    apply (simp add: wlp_eq')
    done
  
  lemma wlp_whileI':
    assumes INIT: "I s\<^sub>0"
    assumes STEP: "\<And>s. I s \<Longrightarrow> (if bval b s then wlp c I s else Q s)"
    shows "wlp (WHILE b DO c) Q s\<^sub>0"
    unfolding wlp_def
  proof clarify
    fix t
    assume "(WHILE b DO c, s\<^sub>0) \<Rightarrow> t"
    thus "Q t" using INIT
    proof (induction "WHILE b DO c" s\<^sub>0 t rule: big_step_induct)
      case (WhileFalse s)
      from \<open>\<not>bval b s\<close> STEP have "I s \<Longrightarrow> Q s" by simp
      with \<open>I s\<close> show "Q s" by blast
    next
      case (WhileTrue s\<^sub>1 s\<^sub>2 s\<^sub>3)
      from \<open>bval b s\<^sub>1\<close> STEP \<open>I s\<^sub>1\<close> have "wlp c I s\<^sub>1" by simp
      with \<open>(c,s\<^sub>1) \<Rightarrow> s\<^sub>2\<close> have "I s\<^sub>2" unfolding wlp_def by auto
      with \<open>I s\<^sub>2 \<Longrightarrow> Q s\<^sub>3\<close> show "Q s\<^sub>3" .
    qed
  qed
  (** Challenge: Who finds the shortest proof for wlp_whileI'?
    We'll count the number of non-whitespace characters, from everything behind the \<open>shows-line\<close>,
    including the final done, or by, or qed.
    
    The proof must be placed at this point in the theory, i.e., only use lemmas that
    are available here!
  *)  
  
  
  

section \<open>Proving Partial Correctness\<close>
thm while_unfold
  
  text \<open>Equivalent form of while-rule, where invariant preservation
     assumption is independent of postcondition.\<close>
  lemma wlp_whileI:
    assumes INIT: "I s\<^sub>0"
    assumes STEP: "\<And>s. \<lbrakk> I s; bval b s \<rbrakk> \<Longrightarrow> wlp c I s"
    assumes FINAL: "\<And>s. \<lbrakk> I s; \<not>bval b s \<rbrakk> \<Longrightarrow> Q s"
    shows "wlp (WHILE b DO c) Q s\<^sub>0"
    using assms wlp_whileI' by auto
  

  text \<open>Equivalent form of if rule, with splitting\<close>
  lemma wlp_ifI: "\<lbrakk>
      bval b s \<Longrightarrow> wlp c\<^sub>1 Q s; 
      \<not>bval b s \<Longrightarrow> wlp c\<^sub>2 Q s\<rbrakk> 
    \<Longrightarrow> wlp (IF b THEN c\<^sub>1 ELSE c\<^sub>2) Q s"
    by (simp add: wlp_eq')
    
    
  subsection \<open>Example Programs\<close>  
  
  definition "prog_min \<equiv> 
    IF (Less (V ''x'') (V ''y'')) THEN ''z'' ::= V ''x'' 
    ELSE ''z'' ::= V ''y''"
  
  definition "prog_exp \<equiv> 
    ''a''::=N 1;; 
    WHILE Less (N 0) (V ''n'') DO (
      ''a'' ::= Plus (V ''a'') (V ''a'');;
      ''n'' ::= Plus (V ''n'') (N (-1))
    )"  

  subsection \<open>Automatic Execution of Big-Step\<close>  
    
  (* Testing the programs by constructing big-step derivations automatically *)    
  method big_step = 
    rule Skip Seq 
  | (rule Assign, simp?) 
  | (rule IfTrue IfFalse WhileTrue WhileFalse), (simp;fail)
      
  schematic_goal "(prog_exp,<''n'':=5>) \<Rightarrow> ?s"  
    unfolding prog_exp_def
    by big_step+
    
    
    
  subsection \<open>Manual Correctness Proofs\<close>  
  
  (* We'll need these lemmas later! *)
  lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib
  
  lemma "wlp (prog_min) (\<lambda>s'. s' ''z'' = min (s ''x'') (s ''y'')) s"
    unfolding prog_min_def
    apply (rule wlp_ifI)
    apply (subst wlp_assign_eq)
    apply simp
    
    apply (subst wlp_assign_eq)
    apply simp
    done    
    
    
    
  lemma "s ''n'' \<ge> 0 \<Longrightarrow> wlp prog_exp (\<lambda>s'. s' ''a'' = 2^nat (s ''n'')) s"  
    unfolding prog_exp_def
    apply (subst wlp_seq_eq)
    apply (subst wlp_assign_eq)
    apply (rule wlp_whileI[where I="\<lambda>s'. 
      let iters = s ''n'' - s' ''n'' in  s' ''n'' \<ge> 0 \<and> s' ''n'' \<le> s ''n'' \<and> s' ''a'' = 2^nat(iters)"])
    defer
    apply (subst wlp_seq_eq)
    apply (subst wlp_assign_eq)
    apply (subst wlp_assign_eq)
    defer
    defer
    subgoal apply simp done
    subgoal for s' apply (auto simp: nat_distribs algebra_simps) done
    subgoal apply simp done
    done
    
    
        
    
  subsection \<open>Automating the Proofs\<close>  
    
  (* Intermediate goals got quite big: Lets simplify them while we go! *)  
    
  lemma "s ''n'' \<ge> 0 \<Longrightarrow> wlp prog_exp (\<lambda>s'. s' ''a'' = 2^nat (s ''n'')) s"  
    unfolding prog_exp_def
    (* Apply clarsimp after assign and while ... not needed for seq, skip! *)
    apply (subst wlp_seq_eq)
    apply (subst wlp_assign_eq; clarsimp?)
    apply (rule wlp_whileI[where I="\<lambda>s'. 
      let iters = s ''n'' - s' ''n'' in  s' ''n'' \<ge> 0 \<and> s' ''n'' \<le> s ''n'' \<and> s' ''a'' = 2^nat(iters)"]
      ; clarsimp
      )
    apply (subst wlp_seq_eq)
    apply (subst wlp_assign_eq; clarsimp?)
    apply (subst wlp_assign_eq; clarsimp?)
    apply (auto simp: nat_distribs algebra_simps)
    done
        
  (* Automating the VCG *)  

  (*
    Note: This uses (a simple fragment of) the Eisbach language. 
    See Documentation/Tutorials/eisbach if you want to know more!
  *)
      
  named_theorems vcg_rules  
  
  declare wlp_ifI[vcg_rules]
  
    
  method vcg_step declares vcg_rules = 
      simp only: wlp_seq_eq wlp_skip_eq    wp_seq_eq wp_skip_eq 
    | subst wlp_assign_eq                  wp_assign_eq 
    | rule vcg_rules
    \<comment> \<open>One step. Note that we unfold as many seqs or skips as possible, as these won't enlarge the subgoal, 
      so no intermediate simplification is required\<close>
  
  method vcg declares vcg_rules = ( (vcg_step; vcg)? )
    \<comment> \<open>Recursively apply all possible steps, without intermediate simplification\<close>
    
  method smartvcg declares vcg_rules = ( (vcg_step; clarsimp?; smartvcg)? )
    \<comment> \<open>Recursively apply all possible steps, with intermediate simplification\<close>

    
    
  lemma "wlp (prog_min) (\<lambda>s'. s' ''z'' = min (s ''x'') (s ''y'')) s"
    unfolding prog_min_def
    apply smartvcg
    done

  lemma "s ''n'' \<ge> 0 \<Longrightarrow> wlp prog_exp (\<lambda>s'. s' ''a'' = 2^nat (s ''n'')) s"  
    unfolding prog_exp_def
    (* Provide the **instantiated** while rule in an ad-hoc manner *)
    apply (smartvcg vcg_rules: 
      wlp_whileI[where 
          I="\<lambda>s'. s' ''a'' = 2 ^ nat (s ''n'' - s' ''n'') \<and> 0 \<le> s' ''n'' \<and> s' ''n'' \<le> s ''n''"
        ]
    )
    by (auto simp: algebra_simps nat_distribs) 
    
    
  subsection \<open>Annotation of Loop Invariants\<close>  
    
  (* Better: Annotate the invariants to the loops before proving. 
    (Control which loop gets which invariant, if there are many loops) *)  
    
  definition "WHILE_annotI (I::state \<Rightarrow> bool) \<equiv> While"
  lemmas wlp_annotate_while = WHILE_annotI_def[symmetric]
  lemmas wlp_while_annotI[vcg_rules] = wlp_whileI[of I,folded WHILE_annotI_def[of I]] for I

    
  lemma "s ''n'' \<ge> 0 \<Longrightarrow> wlp prog_exp (\<lambda>s'. s' ''a'' = 2^nat (s ''n'')) s"  
    unfolding prog_exp_def
    apply (subst wlp_annotate_while[where 
          I="\<lambda>s'. s' ''a'' = 2 ^ nat (s ''n'' - s' ''n'') \<and> 0 \<le> s' ''n'' \<and> s' ''n'' \<le> s ''n''" 
        ])
    apply smartvcg  
    by (auto simp: algebra_simps nat_distribs) 
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
section \<open>Total Correctness\<close>  
  
  subsection \<open>While-Rule for Total Correctness\<close>
  
  
  lemma wp_while_unfold: "wp (WHILE b DO c) Q s = (if bval b s then wp c (wp (WHILE b DO c) Q) s else Q s)"
    apply (subst wp_equiv[OF while_unfold])
    apply (simp add: wp_eq')
    done
  
  lemma wp_whileI':
    assumes WF: "wf R"
    assumes INIT: "I s\<^sub>0"
    assumes STEP: "\<And>s. I s \<Longrightarrow> (if bval b s then wp c (\<lambda>s'. I s' \<and> (s',s)\<in>R) s else Q s)"
    shows "wp (WHILE b DO c) Q s\<^sub>0"
    using WF INIT 
    apply induction
    apply (subst wp_while_unfold)
    by (smt STEP wp_conseq)
    
    
  text \<open>Detailed Isar proof of @{thm [source] wp_whileI'}:\<close>
  lemma 
    assumes WF: "wf R"
    assumes INIT: "I s\<^sub>0"
    assumes STEP: "\<And>s. I s \<Longrightarrow> (if bval b s then wp c (\<lambda>s'. I s' \<and> (s',s)\<in>R) s else Q s)"
    shows "wp (WHILE b DO c) Q s\<^sub>0"
    using WF INIT 
  proof induction
    case (less s)
    show "wp (WHILE b DO c) Q s" 
    proof (rule wp_while_unfold[THEN iffD2])
      show "if bval b s then wp c (wp (WHILE b DO c) Q) s else Q s" 
      proof (split if_split; intro allI impI conjI)
        assume [simp]: "bval b s"
        
        from STEP \<open>I s\<close> have "wp c (\<lambda>s'. I s' \<and> (s',s)\<in>R) s" by simp
        thus "wp c (wp (WHILE b DO c) Q) s" proof (rule wp_conseq)
          fix s' assume "I s' \<and> (s',s)\<in>R"
          with less.IH show "wp (WHILE b DO c) Q s'" by blast
        qed
      next
        assume [simp]: "\<not>bval b s"
        from STEP \<open>I s\<close> show "Q s" by simp
      qed
    qed
  qed
          
  text \<open>Equivalent form of while-rule, where invariant preservation assumption 
    is independent of postcondition.\<close>
  lemma wp_whileI:
    assumes WF: "wf R"
    assumes INIT: "I s\<^sub>0"
    assumes STEP: "\<And>s. \<lbrakk> I s; bval b s \<rbrakk> \<Longrightarrow> wp c (\<lambda>s'. I s' \<and> (s',s)\<in>R) s"
    assumes FINAL: "\<And>s. \<lbrakk> I s; \<not>bval b s \<rbrakk> \<Longrightarrow> Q s"
    shows "wp (WHILE b DO c) Q s\<^sub>0"
    using assms wp_whileI' by auto

  subsection \<open>Invariant Annotation and VCG setup\<close>    
    
  definition "WHILE_annot (R::state rel) (I::state \<Rightarrow> bool) \<equiv> While"
  lemmas wp_annotate_while = WHILE_annot_def[symmetric]
  lemmas wp_while_annotI[vcg_rules] = wp_whileI[of R I,folded WHILE_annot_def[of R I]] for R I

  text \<open>Equivalent form of if rule, with splitting\<close>
  lemma wp_ifI[vcg_rules]: "\<lbrakk>
      bval b s \<Longrightarrow> wp c\<^sub>1 Q s; 
      \<not>bval b s \<Longrightarrow> wp c\<^sub>2 Q s
    \<rbrakk> \<Longrightarrow> wp (IF b THEN c\<^sub>1 ELSE c\<^sub>2) Q s"
    by (simp add: wp_eq')

    
  subsection \<open>Example Proofs\<close>    
        
  (* No loop contained in this program! *)    
  lemma "wp (prog_min) (\<lambda>s'. s' ''z'' = min (s ''x'') (s ''y'')) s"
    unfolding prog_min_def
    by smartvcg

  lemma "s ''n'' \<ge> 0 \<Longrightarrow> wp prog_exp (\<lambda>s'. s' ''a'' = 2^nat (s ''n'')) s"  
    unfolding prog_exp_def
    apply (subst wp_annotate_while[where 
          I="\<lambda>s'. s' ''a'' = 2 ^ nat (s ''n'' - s' ''n'') \<and> 0 \<le> s' ''n'' \<and> s' ''n'' \<le> s ''n''" 
      and R = "measure (\<lambda>s. undefined (s ''n''))"]
      )
    apply smartvcg  
    apply (auto simp: algebra_simps nat_distribs) 
    oops
    
  
    
end
