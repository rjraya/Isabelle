theory Submission
  imports Defs
begin

lemma bezout: "q = old_r div r \<Longrightarrow> 
       old_r = a\<^sub>0 * old_s + b\<^sub>0 * old_t \<Longrightarrow>
       r = a\<^sub>0 * s + b\<^sub>0 * t \<Longrightarrow>
       old_r - q * r = a\<^sub>0 * (old_s - q * s) + b\<^sub>0 * (old_t - q * t)" for a\<^sub>0 b\<^sub>0 old_s old_r old_t r :: int
  by (simp add: add_diff_eq distrib_left mult.left_commute right_diff_distrib')

lemma euclid: "gcd a b = gcd b (a - (a div b) * b)" for a b :: int
  by (metis gcd_red_int minus_div_mult_eq_mod)

lemma positive_descent: "0 < r \<Longrightarrow>
       0 \<le> old_r - old_r div r * r" for a\<^sub>0 b\<^sub>0 old_s old_r old_t r :: int
  by (simp add: minus_div_mult_eq_mod)

program_spec euclid_extended
  assumes "a>0 \<and> b>0"
  ensures "old_r = gcd a\<^sub>0 b\<^sub>0 \<and> gcd a\<^sub>0 b\<^sub>0 = a\<^sub>0 * old_s + b\<^sub>0 * old_t"
defines \<open>
    s = 0;    old_s = 1;
    t = 1;    old_t = 0;
    r = b;    old_r = a;
    while (r\<noteq>0) 
      @invariant\<open>old_r > 0 \<and> r \<ge> 0 \<and>
                 gcd a b = gcd old_r r \<and>
                 old_r = a\<^sub>0 * old_s + b\<^sub>0 * old_t \<and> r = a\<^sub>0 * s + b\<^sub>0 * t 
                  :: bool\<close>      
      @variant\<open>nat r\<close>    
    {
      quotient = old_r / r;
      temp = old_r;
      old_r = r;
      r = temp - quotient * r;
      temp = old_s;
      old_s = s;
      s = temp - quotient * s;
      temp = old_t;
      old_t = t;
      t = temp - quotient * t
    }
  \<close>
  apply vcg
  apply simp
  apply simp
  apply (metis bezout euclid le_less positive_descent)
  apply (auto simp add: minus_div_mult_eq_mod)
  done

program_spec equilibrium
  assumes \<open>l\<le>h\<close>
  ensures \<open>is_equil a l h i \<or> i=h \<and> (\<nexists>i. is_equil a l h i)\<close>
  defines \<open>
    usum=0; i=l;
    while (i<h) 
      @variant\<open>nat (h-i)\<close>      
      @invariant\<open>usum = (\<Sum>j=l..<i. a j) \<and> l \<le> i \<and> i \<le> h  :: bool\<close>    
    { 
      usum = usum + a[i]; i=i+1 
    };
    i=l; lsum=0;
    while (usum \<noteq> lsum \<and> i<h) 
      @variant\<open>nat (h-i)\<close>      
      @invariant\<open>usum = (\<Sum>j=i..<h. a j) \<and>
                 lsum = (\<Sum>j=l..<i. a j) \<and> 
                 l \<le> i \<and> i \<le> h \<and>
                 (\<forall> x \<in> {l..<i}. \<not> is_equil a l h x) :: bool\<close>    
    {
      lsum = lsum + a[i];
      usum = usum - a[i];
      i=i+1
    }
  \<close>
  apply vcg
  apply simp+
  apply (simp add: intvs_incdec)
  apply simp+
  defer 1
  apply (simp add: intvs_incdec)
  apply (metis atLeastLessThan_iff is_equil_def le_less)
  apply clarify
  apply(rule conjI)
  apply(simp add:  intvs_incr_l sum_diff1)
  apply(rule conjI)
  apply (simp add: intvs_incr_h)
  by (simp add: intvs_incr_h is_equil_def)

end